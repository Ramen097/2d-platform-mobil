[gd_scene load_steps=12 format=3 uid="uid://724he00o53i8"]

[ext_resource type="Script" path="res://container.gd" id="1_j5ejq"]
[ext_resource type="Texture2D" uid="uid://b8kv8fjh8da3n" path="res://icon.svg" id="2_swmqx"]

[sub_resource type="CanvasItemMaterial" id="CanvasItemMaterial_6w6o7"]

[sub_resource type="QuadMesh" id="QuadMesh_ye6dm"]

[sub_resource type="QuadMesh" id="QuadMesh_qn06q"]
subdivide_width = 2
subdivide_depth = 2

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_bvnv8"]
bounce = 0.14

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ycog5"]
size = Vector2(20, 10.4444)

[sub_resource type="GDScript" id="GDScript_bcyw4"]
script/source = "extends CharacterBody2D
@onready var color_rect = get_node(\"../Panel/ColorRect\")

const SPEED = 500.0
const JUMP_VELOCITY = -1000.0
var azure = Color.AZURE

func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta
		color_rect.modulate = Color()
	else:
		color_rect.modulate = Color(0.5,1,1)

	# Handle jump.
	if Input.is_action_just_pressed(\"ui_up\") and is_on_floor():#
		velocity.y = JUMP_VELOCITY *6

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction := Input.get_axis(\"ui_left\", \"ui_right\")
	if direction:
		velocity.x = direction * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)

	move_and_slide()
"

[sub_resource type="SphereMesh" id="SphereMesh_rxhjh"]
height = 0.5

[sub_resource type="CircleShape2D" id="CircleShape2D_jcbyn"]
radius = 0.55116

[sub_resource type="LabelSettings" id="LabelSettings_s0sbp"]
line_spacing = 0.0
font_size = 22
font_color = Color(0, 0, 0, 1)

[node name="Node2D" type="Node2D"]

[node name="BG" type="MeshInstance2D" parent="."]
visible = false
modulate = Color(0.492588, 0.07939, 0.475761, 1)
self_modulate = Color(0.513099, 0.163705, 0.13446, 1)
material = SubResource("CanvasItemMaterial_6w6o7")
position = Vector2(574.75, 321.75)
scale = Vector2(1150.5, 644.5)
mesh = SubResource("QuadMesh_ye6dm")

[node name="Ground" type="MeshInstance2D" parent="."]
self_modulate = Color(0.291332, 0.291333, 0, 1)
position = Vector2(574, 628)
scale = Vector2(1252, 31.5)
mesh = SubResource("QuadMesh_qn06q")

[node name="StaticBody2D" type="StaticBody2D" parent="Ground"]
physics_material_override = SubResource("PhysicsMaterial_bvnv8")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Ground/StaticBody2D"]
position = Vector2(0, 4.77778)
shape = SubResource("RectangleShape2D_ycog5")

[node name="Panel" type="Panel" parent="."]
visible = false
offset_right = 40.0
offset_bottom = 40.0

[node name="ColorRect" type="ColorRect" parent="Panel"]
layout_mode = 0
offset_right = 132.0
offset_bottom = 40.0
color = Color(0.836144, 0.310344, 0.494803, 1)

[node name="Payer" type="CharacterBody2D" parent="."]
position = Vector2(401, 249)
scale = Vector2(80.5907, 79.5)
disable_mode = 2
collision_layer = 15
script = SubResource("GDScript_bcyw4")
metadata/_edit_group_ = true

[node name="MeshInstance2D" type="MeshInstance2D" parent="Payer"]
mesh = SubResource("SphereMesh_rxhjh")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Payer"]
shape = SubResource("CircleShape2D_jcbyn")

[node name="Icon" type="Sprite2D" parent="Payer"]
position = Vector2(-1.81162, 1.81132)
scale = Vector2(0.0124084, 0.0125786)
texture = ExtResource("2_swmqx")

[node name="Container" type="HFlowContainer" parent="."]
offset_right = 14.0
offset_bottom = 14.0
alignment = 1
script = ExtResource("1_j5ejq")

[node name="ColorW" type="ColorRect" parent="Container"]
custom_minimum_size = Vector2(30, 30)
layout_mode = 2

[node name="Label" type="Label" parent="Container/ColorW"]
clip_contents = true
layout_mode = 0
offset_right = 30.0
offset_bottom = 31.0
text = "W"
label_settings = SubResource("LabelSettings_s0sbp")
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="ColorS" type="ColorRect" parent="Container"]
custom_minimum_size = Vector2(30, 30)
layout_mode = 2

[node name="Label" type="Label" parent="Container/ColorS"]
clip_contents = true
layout_mode = 0
offset_right = 30.0
offset_bottom = 31.0
text = "S"
label_settings = SubResource("LabelSettings_s0sbp")
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="ColorA" type="ColorRect" parent="Container"]
custom_minimum_size = Vector2(30, 30)
layout_mode = 2

[node name="Label" type="Label" parent="Container/ColorA"]
clip_contents = true
layout_mode = 0
offset_right = 30.0
offset_bottom = 31.0
text = "A"
label_settings = SubResource("LabelSettings_s0sbp")
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="ColorD" type="ColorRect" parent="Container"]
custom_minimum_size = Vector2(30, 30)
layout_mode = 2

[node name="Label" type="Label" parent="Container/ColorD"]
clip_contents = true
layout_mode = 0
offset_right = 30.0
offset_bottom = 31.0
text = "D"
label_settings = SubResource("LabelSettings_s0sbp")
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2

[node name="ColorSpace" type="ColorRect" parent="Container"]
custom_minimum_size = Vector2(80, 30)
layout_mode = 2
size_flags_horizontal = 4

[node name="Label" type="Label" parent="Container/ColorSpace"]
clip_contents = true
layout_mode = 0
offset_right = 79.0
offset_bottom = 31.0
text = "SPACE"
label_settings = SubResource("LabelSettings_s0sbp")
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 2
